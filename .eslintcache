[{"C:\\Users\\91916\\Desktop\\Tanmay\\Debugged.exe\\telecaller_frontend\\src\\index.js":"1","C:\\Users\\91916\\Desktop\\Tanmay\\Debugged.exe\\telecaller_frontend\\src\\reportWebVitals.js":"2","C:\\Users\\91916\\Desktop\\Tanmay\\Debugged.exe\\telecaller_frontend\\src\\App.js":"3","C:\\Users\\91916\\Desktop\\Tanmay\\Debugged.exe\\telecaller_frontend\\src\\Components\\Admin\\Admin.js":"4","C:\\Users\\91916\\Desktop\\Tanmay\\Debugged.exe\\telecaller_frontend\\src\\Components\\JrCaller\\JrCaller.jsx":"5","C:\\Users\\91916\\Desktop\\Tanmay\\Debugged.exe\\telecaller_frontend\\src\\Components\\Home\\Home.jsx":"6","C:\\Users\\91916\\Desktop\\Tanmay\\Debugged.exe\\telecaller_frontend\\src\\Components\\Form\\Form.jsx":"7","C:\\Users\\91916\\Desktop\\Tanmay\\Debugged.exe\\telecaller_frontend\\src\\Components\\SignInPage\\SignInPage.jsx":"8","C:\\Users\\91916\\Desktop\\Tanmay\\Debugged.exe\\telecaller_frontend\\src\\Components\\Navbar\\Navbar.js":"9","C:\\Users\\91916\\Desktop\\Tanmay\\Debugged.exe\\telecaller_frontend\\src\\Components\\SrCaller\\SrCaller.jsx":"10","C:\\Users\\91916\\Desktop\\Tanmay\\Debugged.exe\\telecaller_frontend\\src\\Components\\BatchTable\\BatchTable.js":"11","C:\\Users\\91916\\Desktop\\Tanmay\\Debugged.exe\\telecaller_frontend\\src\\Components\\Table\\Table.js":"12","C:\\Users\\91916\\Desktop\\Tanmay\\Debugged.exe\\telecaller_frontend\\src\\Components\\JrTable\\JrTable.js":"13","C:\\Users\\91916\\Desktop\\Tanmay\\Debugged.exe\\telecaller_frontend\\src\\Components\\LogTable\\LogTable.js":"14","C:\\Users\\91916\\Desktop\\Tanmay\\Debugged.exe\\telecaller_frontend\\src\\Components\\SrTable\\SrTable.js":"15","C:\\Users\\91916\\Desktop\\Tanmay\\Debugged.exe\\telecaller_frontend\\src\\Components\\ModalTable\\ModalTable.js":"16","C:\\Users\\91916\\Desktop\\Tanmay\\Debugged.exe\\telecaller_frontend\\src\\Components\\BatchTable\\BatchRow.js":"17","C:\\Users\\91916\\Desktop\\Tanmay\\Debugged.exe\\telecaller_frontend\\src\\Components\\Table\\Row.js":"18","C:\\Users\\91916\\Desktop\\Tanmay\\Debugged.exe\\telecaller_frontend\\src\\Components\\JrTable\\JrRow.js":"19","C:\\Users\\91916\\Desktop\\Tanmay\\Debugged.exe\\telecaller_frontend\\src\\Components\\SrTable\\SrRow.js":"20","C:\\Users\\91916\\Desktop\\Tanmay\\Debugged.exe\\telecaller_frontend\\src\\Components\\LogTable\\LogRow.js":"21","C:\\Users\\91916\\Desktop\\Tanmay\\Debugged.exe\\telecaller_frontend\\src\\Components\\ModalTable\\ModalRow.js":"22"},{"size":500,"mtime":499162500000,"results":"23","hashOfConfig":"24"},{"size":362,"mtime":499162500000,"results":"25","hashOfConfig":"24"},{"size":3262,"mtime":1614531054991,"results":"26","hashOfConfig":"24"},{"size":18090,"mtime":1614531054995,"results":"27","hashOfConfig":"24"},{"size":3908,"mtime":1614005658615,"results":"28","hashOfConfig":"24"},{"size":1594,"mtime":1611671870647,"results":"29","hashOfConfig":"24"},{"size":11676,"mtime":1614535091125,"results":"30","hashOfConfig":"24"},{"size":4382,"mtime":1614005658646,"results":"31","hashOfConfig":"24"},{"size":3202,"mtime":1613109149188,"results":"32","hashOfConfig":"24"},{"size":4296,"mtime":1614531055005,"results":"33","hashOfConfig":"24"},{"size":1107,"mtime":1614005658554,"results":"34","hashOfConfig":"24"},{"size":1179,"mtime":1613109149200,"results":"35","hashOfConfig":"24"},{"size":1142,"mtime":1613109149168,"results":"36","hashOfConfig":"24"},{"size":1071,"mtime":1614005658631,"results":"37","hashOfConfig":"24"},{"size":1333,"mtime":1614531055013,"results":"38","hashOfConfig":"24"},{"size":839,"mtime":1614531055000,"results":"39","hashOfConfig":"24"},{"size":422,"mtime":1614005658522,"results":"40","hashOfConfig":"24"},{"size":12531,"mtime":1614531055095,"results":"41","hashOfConfig":"24"},{"size":5277,"mtime":1614005658631,"results":"42","hashOfConfig":"24"},{"size":651,"mtime":1614531055009,"results":"43","hashOfConfig":"24"},{"size":417,"mtime":1614005658631,"results":"44","hashOfConfig":"24"},{"size":4541,"mtime":1614531054998,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"1xbkfxh",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"48"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"48"},"C:\\Users\\91916\\Desktop\\Tanmay\\Debugged.exe\\telecaller_frontend\\src\\index.js",[],["98","99"],"C:\\Users\\91916\\Desktop\\Tanmay\\Debugged.exe\\telecaller_frontend\\src\\reportWebVitals.js",[],"C:\\Users\\91916\\Desktop\\Tanmay\\Debugged.exe\\telecaller_frontend\\src\\App.js",["100"],"import React, {Component} from 'react';\r\nimport './App.css';\r\nimport Form from './Components/Form/Form';\r\nimport Home from './Components/Home/Home';\r\nimport SignInPage from './Components/SignInPage/SignInPage';\r\nimport Admin from './Components/Admin/Admin';\r\nimport Navbar from './Components/Navbar/Navbar';\r\nimport Background from './Container/Images/Background.png';\r\nimport JrCaller from './Components/JrCaller/JrCaller';\r\nimport SrCaller from './Components/SrCaller/SrCaller';\r\n\r\nconst initialState = {\r\n\troute: 'home',\r\n    user: {\r\n        username: '',\r\n        telecaller_id: '',\r\n        des: ''\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.state = initialState;\r\n\t}\r\n\r\n\tonRouteChange = (route) => {\r\n        console.log('Routing')\r\n\t\tthis.setState({route: route})\r\n\t}\r\n\r\n    loadUser = (user) => {\r\n        console.log('Loading user');\r\n        this.setState({user:{\r\n            username: user.username,\r\n            telecaller_id: user.telecaller_id,\r\n            des: user.des\r\n        }})\r\n    }\r\n\r\n    onSubmitHandler = (username, password) => {\r\n        fetch('http://localhost:3001/signin', {\r\n                method: 'post',\r\n                headers: {'Content-Type': 'application/json'},\r\n                body: JSON.stringify({\r\n                username: username,\r\n                password: password\r\n                })\r\n             })\r\n        .then(response => response.json())\r\n        .then(resp => {\r\n        if(resp.des)\r\n        {\r\n            this.loadUser(resp);\r\n            this.onRouteChange(resp.des);\r\n        }\r\n        })\r\n        .catch(err => console.log(err))\r\n    }\r\n\r\n  \trender()\r\n  \t{\r\n  \t\tconst {route,user} = this.state;\r\n    \tif(route==='home')\r\n    \t{\r\n    \t\treturn(\r\n\t\t\t\t<div>\r\n                    <Navbar route = {route} onRouteChange={this.onRouteChange} />\r\n    \t\t\t    <Home onRouteChange={this.onRouteChange} />\r\n\t    \t\t</div>\r\n    \t\t);\r\n    \t}\r\n    \telse if(route==='form')\r\n    \t{\r\n    \t\treturn(\r\n\t\t\t\t<div className=\"back\">\r\n                    <Navbar route = {route} onRouteChange={this.onRouteChange}/>\r\n    \t\t\t\t<Form />\r\n    \t\t\t</div>\r\n    \t\t);\r\n    \t}\r\n        else if(route==='signin')\r\n        {\r\n            return(\r\n                <div>\r\n                    <Navbar route = {route} onRouteChange={this.onRouteChange}/>\r\n                    <SignInPage loadUser={this.loadUser} onRouteChange={this.onRouteChange} onSubmitHandler={this.onSubmitHandler} />\r\n                </div>\r\n            );\r\n        }\r\n        else if(route==='Admin')\r\n        {\r\n            return(\r\n                <div>\r\n                    <Navbar route = {route} onRouteChange={this.onRouteChange} />\r\n                    <Admin />\r\n                </div>\r\n            );\r\n        }\r\n        else if(route==='JrCaller')\r\n        {\r\n            return(\r\n                <div>\r\n                    <Navbar route = {route} onRouteChange={this.onRouteChange} />\r\n                    <JrCaller user={user}/>\r\n                </div>\r\n            );\r\n        }\r\n\t\t\t\telse if(route==='SrCaller'){\r\n\t\t\t\t\treturn(\r\n\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t<Navbar route = {route} onRouteChange={this.onRouteChange} />\r\n\t\t\t\t\t\t\t\t\t<SrCaller user={user}/>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n    }\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\91916\\Desktop\\Tanmay\\Debugged.exe\\telecaller_frontend\\src\\Components\\Admin\\Admin.js",["101","102","103"],"import React,{useState, useEffect} from 'react';\r\nimport Table from '../Table/Table.js';\r\nimport LogTable from '../LogTable/LogTable.js';\r\nimport BatchTable from '../BatchTable/BatchTable.js';\r\nimport './Admin.css';\r\nconst Admin = () => {\r\n\r\n\tconst leadDataHeader = [\r\n\t\t'LeadId',\r\n\t\t'Assigned To',\r\n\t\t'LeadName',\r\n\t\t'LeadContact',\r\n\t\t'WhatsApp Number',\r\n\t\t'Account Opening Number',\r\n\t\t'First Status',\r\n\t\t'Second Status',\r\n\t\t'Update After Hand-Over',\r\n        'City',\r\n        'Knowledge', \r\n        'Demat',\r\n        'Broker' ,\r\n        'Preffered Language',\r\n        'Microsoft Id',\r\n        'Coded'\r\n\t]\r\n\r\n\tconst logDataHeader = [\r\n\t\t'Username',\r\n\t\t'Telecaller Id',\r\n\t\t'Handover Count'\r\n\t]\r\n\r\n\tconst [leadData, setLeadData] = useState([])\r\n\r\n\tconst [filter, setFilter] = useState('*')\r\n\r\n\tconst setFilterField = (event) => {\r\n\t\tsetFilter(event.target.value);\r\n\t}\r\n\r\n\tconst [username, setUsername] = useState('')\r\n\tconst [usernameFlag, setUsernameFlag] = useState(false)\r\n\tconst [usernameErr, setUsernameErr] = useState('')\r\n\r\n\tconst setUsernameField = (event) => {\r\n\t\tsetUsername(event.target.value)\r\n\t}\r\n\r\n\tconst usernameValidate = () => {\r\n\t\tif(username==='')\r\n\t\t{\r\n\t\t\tsetUsernameFlag(false)\r\n\t\t\tsetUsernameErr('Set username field')\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tsetUsernameFlag(true)\r\n\t\t\tsetUsernameErr('')\r\n\t\t}\r\n\t}\r\n\r\n\tconst [password, setPassword] = useState('')\r\n\tconst [passwordFlag, setPasswordFlag] = useState(false)\r\n\tconst [passwordErr, setPasswordErr] = useState('')\r\n\r\n\tconst setPasswordField = (event) => {\r\n\t\tsetPassword(event.target.value)\r\n\t}\r\n\r\n\tconst passwordValidate = () => {\r\n\t\tif(password==='')\r\n\t\t{\r\n\t\t\tsetPasswordFlag(false)\r\n\t\t\tsetPasswordErr('Set password field')\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tsetPasswordFlag(true)\r\n\t\t\tsetPasswordErr('')\r\n\t\t}\r\n\t}\r\n\r\n\tconst [telecaller_id, setTelecaller] = useState('')\r\n\tconst [telecallerFlag, setTelecallerFlag] = useState(false)\r\n\tconst [telecallerErr, setTelecallerErr] = useState('')\r\n\r\n\tconst setTelecallerField = (event) => {\r\n\t\tsetTelecaller(event.target.value);\r\n\t}\r\n\r\n\tconst telecallerValidate = () => {\r\n\t\tif(telecaller_id==='')\r\n\t\t{\r\n\t\t\tsetTelecallerFlag(false)\r\n\t\t\tsetTelecallerErr('Set Telecaller Id')\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tsetTelecallerFlag(true)\r\n\t\t\tsetTelecallerErr('')\r\n\t\t}\r\n\t}\r\n\r\n\tconst [des, setDes] = useState('none')\r\n\tconst [desFlag, setDesFlag] = useState(false)\r\n\tconst [desErr, setDesErr] = useState('')\r\n\r\n\tconst setDesField = (event) => {\r\n\t\tsetDes(event.target.value)\r\n\t}\r\n\r\n\tconst desValidate = () => {\r\n\t\tif (des==='none') {\r\n\t\t\tsetDesFlag(false)\r\n\t\t\tsetDesErr('Set Designation of caller')\r\n\t\t}\r\n\t\telse if(des!=='JrCaller')\r\n\t\t{\r\n\t\t\tsetAssigned('')\r\n\t\t\tdocument.getElementById('assigned_to').value = ''\r\n\t\t\tconsole.log(document.getElementById('assigned_to').value)\r\n\t\t}\r\n\t\t{\r\n\t\t\tsetDesFlag(true)\r\n\t\t\tsetDesErr('')\r\n\t\t}\r\n\t}\r\n\r\n\tconst [assigned, setAssigned] = useState('')\r\n\tconst [assignedFlag, setAssignedFlag] = useState(false)\r\n\tconst [assignedErr, setAssignedErr] = useState('')\r\n\r\n\tconst setAssignedField = (event) => {\r\n\t\tsetAssigned(event.target.value);\r\n\t}\r\n\r\n\tconst assignedValidate = () => {\r\n\t\tif(des==='JrCaller')\r\n\t\t{\r\n\t\t\tconsole.log(des)\r\n\t\t\tif(assigned==='')\r\n\t\t\t{\r\n\t\t\t\tconsole.log(assigned)\r\n\t\t\t\tsetAssignedFlag(false)\r\n\t\t\t\tsetAssignedErr('Assigned to field compulsary.')\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tsetAssignedFlag(true)\r\n\t\t\t\tsetAssignedErr('')\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tsetAssignedFlag(true)\r\n\t\t\tsetAssignedErr('')\r\n\t\t}\r\n\t}\r\n\r\n\tconst addTelecaller = () => {\r\n\t\tif(assigned==='' && des!=='JrCaller')\r\n\t\t{\r\n\t\t\tsetAssignedFlag(true)\r\n\t\t\tsetAssignedErr('')\r\n\t\t}\r\n\t\tif(\r\n\t\t\tusernameFlag &&\r\n\t\t\tpasswordFlag &&\r\n\t\t\ttelecallerFlag &&\r\n\t\t\tdesFlag &&\r\n\t\t\tassignedFlag\r\n\t\t)\r\n\t\t{\r\n\t\t\tfetch('https://frozen-river-89705.herokuapp.com/register', {\r\n                method: 'post',\r\n                headers: {'Content-Type': 'application/json'},\r\n                body: JSON.stringify({\r\n                username: username,\r\n                password: password,\r\n                telecaller_id: telecaller_id,\r\n                des: des,\r\n                assigned: assigned\r\n                })\r\n             })\r\n\t        .then(response => response.json())\r\n\t        .then(resp => {\r\n\t       \t\tif (resp==='Registered') {\r\n\t       \t\t\talert('Telecaller registered successfully')\r\n\t       \t\t}\r\n\t       \t\telse if(resp==='Not Unique.')\r\n\t       \t\t{\r\n\t       \t\t\talert('Looks like telecaller with same Telecaller Id is already registered.')\r\n\t       \t\t}\r\n\t       \t\telse{\r\n\t       \t\t\talert('OOPs....something went wrong.Please try again.')\r\n\t       \t\t}\r\n\t        })\r\n\t        .catch(err => console.log(err))\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tusernameValidate()\r\n\t\t\tpasswordValidate()\r\n\t\t\ttelecallerValidate()\r\n\t\t\tdesValidate()\r\n\t\t}\r\n\t}\r\n\r\n\tconst showHandler = () => {\r\n\t\tfetch('https://frozen-river-89705.herokuapp.com/admin/show', {\r\n                method: 'post',\r\n                headers: {'Content-Type': 'application/json'},\r\n                body: JSON.stringify({\r\n                filter: filter\r\n                })\r\n             })\r\n\t        .then(response => response.json())\r\n\t        .then(resp => {\r\n\t       \t\tif(resp!=='Unable to fetch')\r\n\t       \t\t{\r\n\t       \t\t\tsetLeadData(resp)\r\n\t       \t\t}\r\n\t       \t\telse\r\n\t       \t\t{\r\n\t       \t\t\talert('Unable to fetch.Please try again.')\r\n\t       \t\t}\r\n\t        })\r\n\t        .catch(err => console.log(err))\r\n\t}\r\n\r\n\tconst [popState, setPopState] = useState('none');\r\n\r\n\tconst setPopStateField = () => {\r\n        if(popState==='none')\r\n        {\r\n            setPopState('block');\r\n        }\r\n        else\r\n        {\r\n        \tsetPopState('none')\r\n        }\r\n    }\r\n\r\n    const [popPayState, setPopPayState] = useState('none');\r\n    const [teleId, setTeleId] = useState('');\r\n    const [logContentArray, setLogContentArray] = useState([]);\r\n\r\n    const setTeleIdField = (event) => {\r\n    \tsetTeleId(event.target.value);\r\n    }\r\n\r\n\tconst setPopPayStateField = () => {\r\n        if(popPayState==='none')\r\n        {\r\n            setPopPayState('block');\r\n        }\r\n        else\r\n        {\r\n        \tsetPopPayState('none')\r\n        \tsetTeleId('')\r\n        \tsetLogContentArray([])\r\n        }\r\n    }\r\n\r\n    const [popBatch, setPopBatch] = useState('none')\r\n    const setPopBatches = () => {\r\n    \tif(popBatch==='none')\r\n    \t{\r\n    \t\tsetPopBatch('block')\r\n    \t}\r\n    \telse\r\n    \t{\r\n    \t\tsetPopBatch('none')\r\n    \t}\r\n    }\r\n\r\n    const fetchBatch = () => {\r\n    \tfetch('https://frozen-river-89705.herokuapp.com/admin/batch/fetch', {\r\n    \t\t\tmethod: 'post',\r\n    \t\t\theaders: {'Content-Type': 'application/json'},\r\n    \t\t\tbody: JSON.stringify({\r\n    \t\t\t\tbatch: batch\r\n    \t\t\t})\r\n    \t\t})\r\n    \t\t.then(response => response.json())\r\n    \t\t.then(resp => {\r\n    \t\t\tif(resp!=='fail')\r\n    \t\t\t{\r\n    \t\t\t\tsetBatchContentArray(resp)\r\n    \t\t\t}\r\n    \t\t\telse\r\n    \t\t\t{\r\n    \t\t\t\tconsole.log('Fetch call to batches failed')\r\n    \t\t\t}\r\n    \t\t})\r\n    \t\t.catch(err => console.log(err))\r\n    }\r\n\r\n    const batchDataHeader = [\r\n    \t'LeadId',\r\n    \t'LeadName',\r\n    \t'LeadContact',\r\n    \t'WhatsApp Number',\r\n\t\t'Account Opening Number',\r\n\t\t'City',\r\n\t\t'Knowledge',\r\n\t\t'Demat',\r\n\t\t'Broker',\r\n\t\t'Preffered Language'\r\n    ]\r\n\r\n    const [batchContentArray, setBatchContentArray] = useState([]);\r\n\r\n    const [batch, setBatch] = useState('current')\r\n    const changeBatch = () => {\r\n    \tif(batch==='current')\r\n    \t{\r\n    \t\tsetBatch('next')\r\n    \t}\r\n    \telse\r\n    \t{\r\n    \t\tsetBatch('current')\r\n    \t}\r\n    }\r\n\r\n    const onShowDetails = () => {\r\n    \tfetch('https://frozen-river-89705.herokuapp.com/admin/log', {\r\n    \t\tmethod: 'post',\r\n    \t\theaders: {'Content-Type': 'application/json'},\r\n    \t\tbody: JSON.stringify({\r\n    \t\t\tteleId: teleId\r\n    \t\t})\r\n    \t})\r\n    \t.then(response => response.json())\r\n    \t.then(resp => {\r\n    \t\tif (resp[0].username) {\r\n    \t\t\tsetLogContentArray(resp)\r\n    \t\t}\r\n    \t\telse if(resp==='Incorrect Submission')\r\n    \t\t{\r\n    \t\t\talert('Incorrect submission')\r\n    \t\t}\r\n    \t})\r\n    \t.catch(err => console.log(err))\r\n    }\r\n\r\n    const batchHandler = (event) => {\r\n    \tconst name = event.target.getAttribute('name');\r\n    \tfetch('https://frozen-river-89705.herokuapp.com/admin/batch/modify', {\r\n    \t\tmethod: 'post',\r\n    \t\theaders: {'Content-Type': 'application/json'},\r\n    \t\tbody: JSON.stringify({\r\n    \t\t\tname: name\r\n    \t\t})\r\n    \t})\r\n    \t.then(response => response.json())\r\n    \t.then(resp => {\r\n    \t\tif(resp==='Success')\r\n    \t\t{\r\n    \t\t\talert('Success')\r\n    \t\t\tfetchBatch()\r\n    \t\t}\r\n    \t})\r\n    \t.catch(err => {\r\n    \t\tconsole.log(err)\r\n    \t\talert('OOPs...something went wrong.Please try again.')\r\n    \t})\r\n    }\r\n\r\n    const [srCaller, setSrCaller] = useState([])\r\n\r\n    const fetchSrCallers = () => {\r\n    \tfetch('https://frozen-river-89705.herokuapp.com/admin/srcaller')\r\n    \t.then(response => response.json())\r\n    \t.then(resp => {\r\n    \t\tif(resp[0].username)\r\n    \t\t{\r\n    \t\t\tsetSrCaller(resp)\r\n    \t\t}\r\n    \t})\r\n    \t.catch(err => {\r\n    \t\tconsole.log(err)\r\n    \t})\r\n    }\r\n\r\n    useEffect(() => {\r\n    \tfetchBatch()\r\n    \tfetchSrCallers()\r\n    }, [batch])\r\n\r\n\treturn(\r\n\t\t<div style={{display: 'flex', flexDirection: 'column', justifyCenter: 'center', itemsCenter: 'flex-end'}}>\t\r\n\t\t\t <div id='pop-up' className='bg-white shadow-4 pop-up' style={{display: `${popState}`}}>\r\n                <a \r\n                onClick={() => setPopStateField()} \r\n                className=\"f6 link dim ph3 pv2 mb2 dib white bg-dark-blue br2 ma2\" \r\n                href=\"#0\">\r\n                    X\r\n                </a>\r\n                <div style={{height:'100%'}} className='flex justify-center items-center flex-column'>\r\n                    <h2>Add New Telecaller</h2>\r\n                    <div>\r\n                        <p>New Username</p>\r\n                        <input\r\n                        id=\"number\" \r\n                        type=\"text\" \r\n                        autoComplete=\"blej\"\r\n                        onChange={(event) => setUsernameField(event)}\r\n                        onBlur={() => usernameValidate()}\r\n                        />\r\n                    </div>\r\n                    <div className=\"f4 red\">{usernameErr}</div>\r\n                    <div>\r\n                        <p>Password</p>\r\n                        <input\r\n                        id=\"password\"\r\n                        type=\"password\"\r\n                        autoComplete=\"blej\"\r\n                        onChange={(event) => setPasswordField(event)}\r\n                        onBlur={() => passwordValidate()}\r\n                        />\r\n                    </div>\r\n                    <div className=\"f4 red\">{passwordErr}</div>\r\n\t                <div>\r\n\t\t\t\t\t\t<p>Telecaller Id</p>\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\tid=\"telecaller_id\"\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tautoComplete=\"blej\"\r\n\t\t\t\t\t\tonChange={(event) => setTelecallerField(event)}\r\n\t\t\t\t\t\tonBlur={() => telecallerValidate()}\r\n\t\t\t\t\t\t/>\r\n                    </div>\r\n                    <div className=\"f4 red\">{telecallerErr}</div>\r\n                    <div>\r\n\t\t\t\t\t\t<p>Designation</p>\r\n\t\t\t\t\t\t<select \r\n\t\t\t\t\t\tstyle={{width: '185px'}}\r\n\t\t\t\t\t\tonChange={(event) => setDesField(event)}\r\n\t\t\t\t\t\tonBlur={() => desValidate()}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<option value='none'>None</option>\r\n\t\t\t\t\t\t\t<option value='SrCaller'>Senior Caller</option>\r\n\t\t\t\t\t\t\t<option value='JrCaller'>Junior Caller</option>\r\n\t\t\t\t\t\t</select>\r\n                    </div>\r\n                    <div className=\"flex flex-column justify-center items-center ma2 pa3\" style = {{display: `${des==='JrCaller'?'flex':'none'}`}}>\r\n\t\t\t\t\t\t<p>Assigned to:</p>\r\n\t\t\t\t\t\t<div className=\"flex justify-center items-center pa2\">\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\tid=\"assigned_to\"\r\n\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\tautoComplete=\"blej\"\r\n\t\t\t\t\t\t\tplaceholder='Enter SrCaller Id'\r\n\t\t\t\t\t\t\tclassName='ma1'\r\n\t\t\t\t\t\t\tonChange={(event) => setAssignedField(event)}\r\n\t\t\t\t\t\t\tonBlur={() => assignedValidate()}\r\n\t\t\t\t\t\t\t></input>\r\n\t\t\t\t\t\t\t<select>\r\n\t\t\t\t\t\t\t<option value=''>Select SrCaller</option>\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tsrCaller.map((item) => {\r\n\t\t\t\t\t\t\t\t\t\treturn(\r\n\t\t\t\t\t\t\t\t\t\t\t<option value={item.telecaller_id}>{`${item.username}(${item.telecaller_id})`}</option>\r\n\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t\t<div className=\"f4 red\">{assignedErr}</div>\r\n\t\t\t\t\t\t</div>\r\n                    </div>\r\n                    <div className=\"f4 red\">{telecallerErr}</div>\r\n                    <div className=\"f4 red\">{desErr}</div>\r\n                    <div\r\n                    style={{cursor: \"pointer\"}}\r\n                    className=\"f6 link dim ph3 pv2 mb2 dib white bg-dark-blue br2 ma2\" \r\n                    href=\"#0\"\r\n                    onClick={() => addTelecaller()}\r\n                    >\r\n                    Add Telecaller\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n{/*-------------- PopUp fpr Payment CheckOut ----------------------------*/}\r\n\t\t\t<div id='pop-up' className='bg-white shadow-4 pop-up-payment-checkout' style={{display: `${popPayState}`, zIndex: '1'}}>\r\n                <a \r\n                onClick={() => setPopPayStateField()} \r\n                className=\"f6 link dim ph3 pv2 mb2 dib white bg-dark-blue br2 ma2\" \r\n                href=\"#0\">\r\n                    X\r\n                </a>\r\n                <div style={{height:'100%'}} className='flex justify-center items-center flex-column'>\r\n                    <h2>TELECALLER LOGS</h2>\r\n                    <div>\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\tclassName=\"pv1 ma2\"\r\n\t\t\t\t\t\tautoComplete=\"blej\"\r\n\t\t\t\t\t\tonChange={(event) => setTeleIdField(event)} \r\n\t\t\t\t\t\tplaceholder='Enter Telecaller name'\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<span \r\n\t\t\t\t\t\tclass=\"f6 link dim ph3 pv2 mb2 dib white br2 bg-dark-blue\"\r\n\t\t\t\t\t\tonClick = {() => onShowDetails()}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\tShowDetails\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<LogTable headerArray={logDataHeader} ContentArray={logContentArray} />\r\n                </div>\r\n            </div>\r\n\r\n{/* ---------------------------------------------------- */}\r\n\r\n\r\n{/*-------------- PopUp fpr Batches ----------------------------*/}\r\n\t\t\t<div id='pop-up' className='bg-white shadow-4 pop-up-batches' style={{display: `${popBatch}`, zIndex: '1'}}>\r\n                <a \r\n                onClick={() => setPopBatches()} \r\n                className=\"f6 link dim ph3 pv2 mb2 dib white bg-dark-blue br2 ma2\">\r\n                    X\r\n                </a>\r\n                <div style={{height:'100%'}} className='flex justify-center items-center flex-column'>\r\n                \t<hr style={{width:'99%', padding: '1px', backgroundColor: 'black'}}/>\r\n                    <h2>BATCHES</h2>\r\n                    <hr style={{width:'99%', padding: '1px', backgroundColor: 'black'}}/>\r\n                    <div className=\"flex justify-center items-center\">\r\n\t                    <h3 \r\n\t                    className={`ma2 pa2 f4 b tc pointer ${batch==='current'?'active1':'effect1 effect1-left'}`}\r\n\t                    onClick={() => changeBatch()}>\r\n\t                    Current\r\n\t                    </h3>\r\n\t                    <h3 \r\n\t                    className={`ma2 pa2 f4 b tc pointer ${batch==='next'?'active1':'effect1 effect1-left'}`}\r\n\t                    onClick={() => changeBatch()}>\r\n\t                    Next\r\n\t                    </h3>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<BatchTable headerArray={batchDataHeader} ContentArray={batchContentArray} />\r\n\t\t\t\t\t<div className=\"flex\">\r\n\t\t\t\t\t\t<div \r\n\t\t\t\t\t\tname={batch} \r\n\t\t\t\t\t\tclassName=\"pointer f6 link dim ph3 pv2 mb2 dib white br2 bg-dark-blue mh2\"\r\n\t\t\t\t\t\tonClick={(event) => batchHandler(event)}>\r\n\t\t\t\t\t\t{batch==='current'?'Clear Batch':'Transfer to Current'}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t\r\n                </div>\r\n            </div>\r\n\r\n{/* ---------------------------------------------------- */}\r\n\r\n\t\t\t<div className=\"admin-container overflow-auto\">\r\n\t\t\t\t\t<div className='flex justify-center items-center flex-column'>\r\n\t\t\t\t\t\t<div>\r\n\t\t                    <select\r\n\t\t                    onChange = {(event) => setFilterField(event)}\r\n\t\t                    >\r\n\t\t                        <option value=\"*\">--Select--</option>\r\n\t\t                        <option value='*'>All</option>\r\n\t\t                        <option value='no'>Unassigned</option>\r\n\t\t                        <option value='Sryes'>Assigned to Sr Caller</option>\r\n\t\t                        <option value='Jryes'>Assigned to Jr Caller</option>\r\n\t\t                        <option value=\"Handed Over\">IsHandedOver(Y)</option>\r\n\t\t                        <option value=\"Not Handed Over\">IsHandedOver(N)</option>\r\n\t\t                    </select>\r\n\t\t                    <div \r\n\t\t                    className=\"f6 link dim ph3 pv2 mb2 dib white bg-dark-blue br2 ma2 pointer\" \r\n\t\t                    href=\"#0\"\r\n\t\t                    onClick = {() => showHandler()} \r\n\t\t                    >\r\n\t\t                    Show Data\r\n\t\t                    </div>\r\n\t\t                    <div \r\n\t\t                    className=\"f6 link dim ph3 pv2 mb2 dib white bg-dark-blue br2 ma2 pointer\" \r\n\t\t                    href=\"#0\"\r\n\t\t                    onClick = {() => showHandler()} \r\n\t\t                    >\r\n\t\t                    Refresh\r\n\t\t                    </div>\r\n\t\t                </div>\r\n\t\t                <Table showHandler={showHandler} headerArray={leadDataHeader} ContentArray={leadData} />\r\n\t\t                <div className=\"flex\">\r\n\t\t\t                <div\r\n\t\t\t                className=\"f6 link dim ph3 pv2 mb2 dib white bg-dark-blue br2 ma2 pointer\" \r\n\t\t\t                href=\"#0\"\r\n\t\t\t                onClick={() => setPopStateField()}>\r\n\t\t\t                Register New Telecallers            \r\n\t\t\t            \t</div>\r\n\t\t\t                <div\r\n\t\t\t                className=\"f6 link dim ph3 pv2 mb2 dib white bg-dark-blue br2 ma2 pointer\" \r\n\t\t\t                href=\"#0\"\r\n\t\t\t                onClick={() => setPopPayStateField()}>\r\n\t\t\t                Check Telecaller Logs            \r\n\t\t\t            \t</div>\r\n\t\t\t            \t<div\r\n\t\t\t                className=\"f6 link dim ph3 pv2 mb2 dib white bg-dark-blue br2 ma2 pointer\" \r\n\t\t\t                onClick={() => setPopBatches()}>\r\n\t\t\t                Check Batches    \r\n\t\t\t            \t</div>\r\n\t\t            \t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t</div>\r\n\t\r\n\t);\r\n}\r\n\r\nexport default Admin;","C:\\Users\\91916\\Desktop\\Tanmay\\Debugged.exe\\telecaller_frontend\\src\\Components\\JrCaller\\JrCaller.jsx",["104"],"import React,{useState, useEffect} from 'react';\r\nimport JrTable from '../JrTable/JrTable.js';\r\n\r\nconst JrCaller = ({user}) => {\r\n\r\n    const {username, telecaller_id} = user;\r\n\r\n    const leadDataHeader = [\r\n        'LeadId',\r\n        'LeadName',\r\n        'LeadContact',\r\n        'Status 1',\r\n        'Status 2',\r\n        'Handedover Status',\r\n        'Coded Status',\r\n        ''\r\n    ]\r\n\r\n    const [leadData, setLeadData] = useState([])\r\n\r\n    useEffect(() => {\r\n        fetch('https://frozen-river-89705.herokuapp.com/jr/fetch/old', {\r\n            method: 'post',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({\r\n                username: username,\r\n                telecaller_id: telecaller_id\r\n            })\r\n        })\r\n        .then(response => response.json())\r\n        .then(resp => {\r\n            if(resp!=='Unable to fetch' && resp[0].lead_id)\r\n            {\r\n                setLeadData(resp)\r\n            }\r\n            else\r\n            {\r\n                alert('OOPS...something went wrong in fetching old leads.')\r\n            }\r\n        })\r\n        .catch(err => console.log(err))\r\n    }, []);\r\n\r\n    const onRefresh = () => {\r\n        fetch('https://frozen-river-89705.herokuapp.com/jr/fetch/old', {\r\n            method: 'post',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({\r\n                username: username,\r\n                telecaller_id: telecaller_id\r\n            })\r\n        })\r\n        .then(response => response.json())\r\n        .then(resp => {\r\n            if(resp!=='Unable to fetch' && resp[0].lead_id)\r\n            {\r\n                setLeadData(resp)\r\n            }\r\n            else\r\n            {\r\n                alert('OOPS...something went wrong in fetching old leads.')\r\n            }\r\n        })\r\n        .catch(err => console.log(err));\r\n    }\r\n\r\n    const onFetch = () => {\r\n        fetch('https://frozen-river-89705.herokuapp.com/jr/fetch/new', {\r\n            method: 'post',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({\r\n                username: username,\r\n                telecaller_id: telecaller_id\r\n            })\r\n        })\r\n        .then(response => response.json())\r\n        .then(resp => {\r\n            if((resp!=='Unable to fetch' || resp!=='Unable to insert') && resp[0].lead_id)\r\n            {\r\n                var newArr = leadData;\r\n                newArr.push(...resp)\r\n                setLeadData(newArr);\r\n            }\r\n            else if(resp==='Not enough leads')\r\n            {\r\n                alert('Not enough leads')\r\n            }\r\n            else if(resp==='30min')\r\n            {\r\n                alert('30 minutes not yet elapsed from last fetch')\r\n            }\r\n            else\r\n            {\r\n                alert('OOPS...something went wrong.Please try again.')\r\n            }\r\n        })\r\n        .catch(err => console.log(err))\r\n    }\r\n\r\n    return (\r\n        <div className=\"pa4\">\r\n            <div className=\"overflow-auto flex flex-column justify-center items-center\">\r\n            <div className=\"flex justify-center\">\r\n                <div \r\n                className=\"f6 link dim ph3 pv2 mb2 dib white bg-dark-blue br2 ma2 pointer\" \r\n                href=\"#0\"\r\n                onClick = {() => onFetch()}\r\n                >\r\n                    Fetch New Leads            \r\n                </div>\r\n                <div \r\n                className=\"f6 link dim ph3 pv2 mb2 dib white bg-dark-blue br2 ma2 pointer\" \r\n                href=\"#0\"\r\n                onClick = {() => onRefresh()}\r\n                >\r\n                    Refresh          \r\n                </div>\r\n            </div>\r\n               <JrTable headerArray={leadDataHeader} ContentArray={leadData} onRefresh={onRefresh}/>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default JrCaller;","C:\\Users\\91916\\Desktop\\Tanmay\\Debugged.exe\\telecaller_frontend\\src\\Components\\Home\\Home.jsx",[],"C:\\Users\\91916\\Desktop\\Tanmay\\Debugged.exe\\telecaller_frontend\\src\\Components\\Form\\Form.jsx",[],"C:\\Users\\91916\\Desktop\\Tanmay\\Debugged.exe\\telecaller_frontend\\src\\Components\\SignInPage\\SignInPage.jsx",[],"C:\\Users\\91916\\Desktop\\Tanmay\\Debugged.exe\\telecaller_frontend\\src\\Components\\Navbar\\Navbar.js",[],"C:\\Users\\91916\\Desktop\\Tanmay\\Debugged.exe\\telecaller_frontend\\src\\Components\\SrCaller\\SrCaller.jsx",["105","106","107"],"import React,{Component} from 'react';\r\nimport SrTable from '../SrTable/SrTable.js';\r\nimport ModalTable from '../ModalTable/ModalTable.js';\r\nimport useStateWithCallback from 'use-state-with-callback';\r\nimport Modal from 'react-modal';\r\n\r\n  class SrCaller extends Component{\r\n    constructor(props){\r\n      super(props);\r\n      this.state = {\r\n        setPreview: false,\r\n        user: this.props.user,\r\n        jrCaller: {\r\n          jrName:'',\r\n          jrTeleId: ''\r\n        },\r\n        data: [],\r\n        jrContent: [],\r\n      }\r\n    }\r\n\r\n    setPreviewState = (s1) => {\r\n      this.setState({\r\n        setPreview: s1\r\n      },() =>{\r\n        console.log('')\r\n      })\r\n    }\r\n\r\n    fetchLogs = () => {\r\n      fetch('https://frozen-river-89705.herokuapp.com/sr/log',{\r\n          method: 'post',\r\n          headers: {'Content-Type': 'application/json'},\r\n          body: JSON.stringify({\r\n          username: this.state.jrCaller.jrName,\r\n          telecaller_id: this.state.jrCaller.jrTeleId\r\n        })\r\n      })\r\n      .then(response => response.json())\r\n      .then(resp => {\r\n        if(resp[0].lead_id)\r\n        {\r\n          this.setState({\r\n            jrContent: resp\r\n          }, () => {\r\n            console.log('')\r\n          })\r\n          this.setState({\r\n            setPreview: true\r\n          }, () => {\r\n            console.log('')\r\n          })\r\n        }\r\n        else if(resp==='empty')\r\n        {\r\n          alert(`No leads assigned to ${this.state.jrCaller.jrName}`)\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err)\r\n        alert('Failed to load telecaller logs.Please try again.')\r\n      })\r\n    }\r\n\r\n    setJrCaller = (username1, telecaller_id1) => {\r\n      var user = {\r\n        jrName: '',\r\n        jrTeleId: ''\r\n      }\r\n      user.jrName = username1\r\n      user.jrTeleId = telecaller_id1\r\n      this.setState({\r\n        jrCaller: user\r\n      }, () => {\r\n        this.fetchLogs()\r\n      })\r\n    }\r\n\r\n    componentDidMount(){\r\n      fetch('https://frozen-river-89705.herokuapp.com/sr/fetch',{\r\n        method: 'post',\r\n        headers: {'Content-Type': 'application/json'},\r\n        body: JSON.stringify({\r\n            username: this.state.user.username,\r\n            telecaller_id: this.state.user.telecaller_id\r\n        })\r\n      })\r\n      .then(response => response.json())\r\n      .then(resp => {\r\n        if(resp[0].username)\r\n        {\r\n          this.setState({\r\n            data: resp\r\n          }, () => {\r\n            console.log('')\r\n          })\r\n        }\r\n      })\r\n      .catch(err => console.log(err))\r\n    }\r\n\r\n    render(){\r\n      const {data,setPreview,jrContent} = this.state;\r\n      const {jrName, jrTeleId} = this.state.jrCaller;\r\n      const leadDataHeader = [\r\n        'Username',\r\n        'Jr_Id'\r\n      ]\r\n\r\n      const jrHeader = [\r\n        'LeadId',\r\n        'LeadName',\r\n        'LeadContact',\r\n        'Status1',\r\n        'Status2',\r\n        'UpdateAfterHandover',\r\n        'HandoverStatus',\r\n        'Coded Status'\r\n      ]\r\n\r\n      const {username, telecaller_id} = this.state.user;\r\n\r\n      return(\r\n        <div className=\"pa4\">\r\n          <SrTable \r\n          headerArray={leadDataHeader} \r\n          contentArray={data} \r\n          setPreviewState={this.setPreviewState} \r\n          setJrCaller={this.setJrCaller}\r\n          />\r\n          <Modal \r\n          isOpen={setPreview}\r\n          ariaHideApp={false} \r\n          >\r\n            <div className=\"flex justify-end\">\r\n              <p\r\n              className=\"f6 link dim ph3 pv2 mb2 dib white bg-dark-blue br2 ma2 pointer flex justify-end items-center\" \r\n              onClick={() => this.setPreviewState(false)}\r\n              >X</p> \r\n            </div>\r\n            <div className='flex flex-column justify-center items-center'>\r\n              <h1>{`LOGS OF ${jrName}(${jrTeleId})`}</h1>\r\n              <div\r\n              style={{cursor: 'pointer'}}\r\n              className=\"bg-dark-blue white f6 link dim ph3 pv2 mb2 dib br2 ma2\"\r\n              onClick={() => this.fetchLogs()}\r\n              >\r\n              Refresh\r\n              </div>\r\n              <ModalTable headerArray={jrHeader} contentArray={jrContent} fetchLogs={this.fetchLogs}/>\r\n            </div>\r\n          </Modal>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\nexport default SrCaller;","C:\\Users\\91916\\Desktop\\Tanmay\\Debugged.exe\\telecaller_frontend\\src\\Components\\BatchTable\\BatchTable.js",[],"C:\\Users\\91916\\Desktop\\Tanmay\\Debugged.exe\\telecaller_frontend\\src\\Components\\Table\\Table.js",[],"C:\\Users\\91916\\Desktop\\Tanmay\\Debugged.exe\\telecaller_frontend\\src\\Components\\JrTable\\JrTable.js",[],"C:\\Users\\91916\\Desktop\\Tanmay\\Debugged.exe\\telecaller_frontend\\src\\Components\\LogTable\\LogTable.js",[],"C:\\Users\\91916\\Desktop\\Tanmay\\Debugged.exe\\telecaller_frontend\\src\\Components\\SrTable\\SrTable.js",[],"C:\\Users\\91916\\Desktop\\Tanmay\\Debugged.exe\\telecaller_frontend\\src\\Components\\ModalTable\\ModalTable.js",[],"C:\\Users\\91916\\Desktop\\Tanmay\\Debugged.exe\\telecaller_frontend\\src\\Components\\BatchTable\\BatchRow.js",[],"C:\\Users\\91916\\Desktop\\Tanmay\\Debugged.exe\\telecaller_frontend\\src\\Components\\Table\\Row.js",[],"C:\\Users\\91916\\Desktop\\Tanmay\\Debugged.exe\\telecaller_frontend\\src\\Components\\JrTable\\JrRow.js",["108","109"],"import React,{useState} from 'react';\r\nimport './JrRow.css';\r\n\r\nconst JrRow = ({rowObject, onRefresh}) => {\r\n\tconst {lead_id, lead_phone_number, handoverstatus, call_status_1, call_status_2, coded} = rowObject;\r\n\tvar disable;\r\n\r\n\tif (handoverstatus==='Handed') {\r\n\t\tdisable=true;\r\n\t}\r\n\telse\r\n\t{\r\n\t\tdisable=false;\r\n\t}\r\n\r\n\tconst elementArray = []\r\n\tObject.keys(rowObject).forEach((key) => {\r\n\t\t\t\telementArray.push(rowObject[key])\r\n\t\t\t})\r\n\r\n\tconst [status1, setStatus1] = useState(call_status_1)\r\n\tconst [status2, setStatus2] = useState(call_status_2)\r\n\r\n\tconst status1Handler = (event) => {\r\n\t\tsetStatus1(event.target.value);\r\n\t}\r\n\r\n\tconst status2Handler = (event) => {\r\n\t\tsetStatus2(event.target.value);\r\n\t}\r\n\r\n\tconst onChange = (event) => {\r\n\t\tconst {value, name} = event.target;\r\n\t\tif(name==='call_status_1')\r\n\t\t{\r\n\t\t\tsetStatus1(value);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tsetStatus2(value);\r\n\t\t}\r\n\t}\r\n\r\n\tconst onSubmit = () => {\r\n\t\tif(handoverstatus!=='Handed')\r\n\t\t{\r\n\t\t\tfetch('https://frozen-river-89705.herokuapp.com/jr/update', {\r\n            method: 'post',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({\r\n            \tlead_phone_number: lead_phone_number,\r\n                call_status_1: status1,\r\n                call_status_2: status2\r\n            })\r\n\t        })\r\n\t        .then(response => response.json())\r\n\t        .then(resp => {\r\n\t            if (resp==='Success') {\r\n\t            \talert('Status updated successfully.')\r\n\t            \tonRefresh();\r\n\t            }\r\n\t            else\r\n\t            {\r\n\t            \talert('OOps something went wrong.Please try again.')\r\n\t            }\r\n\t        })\r\n\t        .catch(err => console.log(err))\r\n\t\t}\r\n\t}\r\n\r\n\tconst [read, setRead] = useState(true)\r\n\r\n\tconst onEditHandler = () => {\r\n\t\tif(handoverstatus!=='Handed')\r\n\t\t{\r\n\t\t\tif(read===true)\r\n\t\t\t{\r\n\t\t\t\tsetRead(false)\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tsetRead(true)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tconst x = 'Done'\r\n\tconst Edit = 'Edit'\r\n\r\n\tconst onHandover = () => {\r\n\t\tif(handoverstatus!=='Handed')\r\n\t\t{\r\n\t\t\tfetch('https://frozen-river-89705.herokuapp.com/jr/handover', {\r\n            method: 'post',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({\r\n            \tlead_id: lead_id,\r\n            \tlead_phone_number: lead_phone_number\r\n            })\r\n\t        })\r\n\t        .then(response => response.json())\r\n\t        .then(resp => {\r\n\t            if (resp==='Success') {\r\n\t            \talert('Status updated successfully.Refresh to view changes.')\r\n\t            }\r\n\t            else\r\n\t            {\r\n\t            \talert('OOps something went wrong.Please try again.')\r\n\t            }\r\n\t        })\r\n\t        .catch(err => console.log(err))\r\n\t\t}\r\n\t}\r\n\r\n\treturn(\r\n\t\t<>\r\n\t\t{\r\n\t\t\telementArray.map((item,index) => {\r\n\t\t\t\tif(index===0 || index===1 || index===2)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn(\r\n\t\t\t\t\t\t<td key={index} className={`${coded==='coded'?'bg-green white fw6':(coded==='notCoded'?'bg-red white fw6':(handoverstatus==='Handed'?'bg-moon-gray':null))} pv3 pr3 bb b--black-20`}>{item}</td>\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t\telse if(index===3)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn(\r\n\t\t\t\t\t\t<td key={index} className={`${coded==='coded'?'bg-green white fw6':(coded==='notCoded'?'bg-red white fw6':(handoverstatus==='Handed'?'bg-moon-gray':null))} pv3 pr3 bb b--black-20`}>\r\n\t\t\t\t\t\t\t<input \r\n\t\t\t\t\t\t\ttype='text' \r\n\t\t\t\t\t\t\tname=\"call_status_1\" \r\n\t\t\t\t\t\t\tautoComplete='blej'\r\n\t\t\t\t\t\t\tplaceholder={`${item}`} \r\n\t\t\t\t\t\t\treadOnly={read}\r\n\t\t\t\t\t\t\tonChange={(event) => onChange(event)}\r\n\t\t\t\t\t\t\tdisabled={disable}/>\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t\telse if(index===4)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn(\r\n\t\t\t\t\t\t<td key={index} className={`${coded==='coded'?'bg-green white fw6':(coded==='notCoded'?'bg-red white fw6':(handoverstatus==='Handed'?'bg-moon-gray':null))} pv3 pr3 bb b--black-20`}>\r\n\t\t\t\t\t\t\t<input \r\n\t\t\t\t\t\t\ttype='text' \r\n\t\t\t\t\t\t\tname=\"call_status_2\" \r\n\t\t\t\t\t\t\tautoComplete='blej' \r\n\t\t\t\t\t\t\tplaceholder={`${item}`} \r\n\t\t\t\t\t\t\treadOnly={read}\r\n\t\t\t\t\t\t\tonChange={(event) => onChange(event)}\r\n\t\t\t\t\t\t\tdisabled={disable}/>\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\treturn(\r\n\t\t\t\t\t\t<td key={index} className={`${coded==='coded'?'bg-green white fw6':(coded==='notCoded'?'bg-red white fw6':(handoverstatus==='Handed'?'bg-moon-gray':null))} pv3 pr3 bb b--black-20`}>\r\n\t\t\t\t\t\t\t{item}\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t\t<div className={`${coded==='coded'?'bg-green white fw6':(coded==='notCoded'?'bg-red white fw6':(handoverstatus==='Handed'?'bg-moon-gray':null))} flex`}>\r\n\t\t\t<td\r\n\t\t\tstyle={{cursor: 'pointer'}}\r\n\t\t\tclassName={`${handoverstatus==='Handed'?'bg-moon-gray black':'bg-dark-blue white'} f6 link dim ph3 pv2 mb2 dib br2 ma2`} href=\"#0\"\r\n\t\t\tonClick={() => onEditHandler()}\r\n\t\t\t>\r\n\t\t\t\t{\r\n\t\t\t\t\tread===false?x:Edit\r\n\t\t\t\t}\r\n\t\t\t</td>\r\n\t\t\t<td\r\n\t\t\tstyle={{cursor: 'pointer'}}\r\n\t\t\tclassName={`${handoverstatus==='Handed'?'bg-moon-gray black':'bg-dark-blue white'} f6 link dim ph3 pv2 mb2 dib br2 ma2`}\r\n\t\t\thref=\"#0\"\r\n\t\t\tonClick = {() => onSubmit()} \r\n\t\t\t>\r\n\t\t\t\tUpdateStatus\r\n\t\t\t</td>\r\n\t\t\t<td\r\n\t\t\tstyle={{cursor: 'pointer'}}\r\n\t\t\tclassName={`${handoverstatus==='Handed'?'bg-moon-gray black':'bg-dark-blue white'} f6 link dim ph3 pv2 mb2 dib br2 ma2`} href=\"#0\" \r\n\t\t\tonClick = {() => onHandover()} \r\n\t\t\t>\r\n\t\t\t\tHandover\r\n\t\t\t</td>\r\n\t\t</div>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default JrRow;",["110","111"],"C:\\Users\\91916\\Desktop\\Tanmay\\Debugged.exe\\telecaller_frontend\\src\\Components\\SrTable\\SrRow.js",[],"C:\\Users\\91916\\Desktop\\Tanmay\\Debugged.exe\\telecaller_frontend\\src\\Components\\LogTable\\LogRow.js",[],"C:\\Users\\91916\\Desktop\\Tanmay\\Debugged.exe\\telecaller_frontend\\src\\Components\\ModalTable\\ModalRow.js",["112","113","114"],"import React,{useState} from 'react';\r\n\r\nconst ModalRow = ({rowObject,fetchLogs}) => {\r\n\tconst {lead_id, lead_phone_number, handoverstatus, call_status_1, call_status_2, updatehandover, coded} = rowObject;\r\n\r\n\tconst [status1, setStatus1] = useState(call_status_1)\r\n\tconst [status2, setStatus2] = useState(call_status_2)\r\n\tconst [update, setUpdate] = useState(updatehandover)\r\n\r\n\tconst status1Handler = (event) => {\r\n\t\tsetStatus1(event.target.value);\r\n\t}\r\n\r\n\tconst status2Handler = (event) => {\r\n\t\tsetStatus2(event.target.value);\r\n\t}\r\n\r\n\tconst onChange = (event) => {\r\n\t\tconst {value, name} = event.target;\r\n\t\tif(name==='call_status_1')\r\n\t\t{\r\n\t\t\tsetStatus1(value);\r\n\t\t}\r\n\t\telse if(name==='call_status_2')\r\n\t\t{\r\n\t\t\tsetStatus2(value);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tsetUpdate(value);\r\n\t\t}\r\n\t}\r\n\r\n\tconst [read, setRead] = useState(true)\r\n\r\n\tconst onSubmit = () => {\r\n\t\tfetch('https://frozen-river-89705.herokuapp.com/sr/update', {\r\n            method: 'post',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({\r\n            \tlead_phone_number: lead_phone_number,\r\n                call_status_1: status1,\r\n                call_status_2: status2,\r\n                updatehandover: update\r\n            })\r\n\t        })\r\n\t        .then(response => response.json())\r\n\t        .then(resp => {\r\n\t            if (resp==='Success') {\r\n\t            \talert('Status updated successfully.')\r\n\t            \tfetchLogs()\r\n\t            }\r\n\t            else\r\n\t            {\r\n\t            \talert('OOps something went wrong.Please try again.')\r\n\t            }\r\n\t        })\r\n\t        .catch(err => console.log(err))\r\n\t}\r\n\r\n\tconst onEditHandler = () => {\r\n\t\tif(read===true)\r\n\t\t{\r\n\t\t\tsetRead(false)\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tsetRead(true)\r\n\t\t}\r\n\t}\r\n\r\n\tconst x = 'Done'\r\n\tconst Edit = 'Edit'\r\n\r\n\tconst elementArray = []\r\n\tObject.keys(rowObject).forEach((key) => {\r\n\t\t\t\telementArray.push(rowObject[key])\r\n\t\t\t})\r\n\r\n\treturn(\r\n\t\t<>\r\n\t\t{\r\n\t\t\telementArray.map((item,index) => {\r\n\t\t\t\tif(index===0 || index===1 || index===2)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn(\r\n\t\t\t\t\t\t<td key={index} className={`${coded==='coded'?'bg-green white fw6':(coded==='notCoded'?'bg-red white fw6':(handoverstatus==='Handed'?'bg-moon-gray':null))} pv3 pr3 bb b--black-20`}>{item}</td>\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t\telse if(index===3)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn(\r\n\t\t\t\t\t\t<td key={index} className={`${coded==='coded'?'bg-green white fw6':(coded==='notCoded'?'bg-red white fw6':(handoverstatus==='Handed'?'bg-moon-gray':null))} pv3 pr3 bb b--black-20`}>\r\n\t\t\t\t\t\t\t<input \r\n\t\t\t\t\t\t\ttype='text' \r\n\t\t\t\t\t\t\tname=\"call_status_1\" \r\n\t\t\t\t\t\t\tautoComplete='blej'\r\n\t\t\t\t\t\t\tplaceholder={`${item}`} \r\n\t\t\t\t\t\t\treadOnly={read}\r\n\t\t\t\t\t\t\tonChange={(event) => onChange(event)}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t\telse if(index===4)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn(\r\n\t\t\t\t\t\t<td key={index} className={`${coded==='coded'?'bg-green white fw6':(coded==='notCoded'?'bg-red white fw6':(handoverstatus==='Handed'?'bg-moon-gray':null))} pv3 pr3 bb b--black-20`}>\r\n\t\t\t\t\t\t\t<input \r\n\t\t\t\t\t\t\ttype='text' \r\n\t\t\t\t\t\t\tname=\"call_status_2\" \r\n\t\t\t\t\t\t\tautoComplete='blej' \r\n\t\t\t\t\t\t\tplaceholder={`${item}`} \r\n\t\t\t\t\t\t\treadOnly={read}\r\n\t\t\t\t\t\t\tonChange={(event) => onChange(event)}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t\telse if(index===5)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn(\r\n\t\t\t\t\t\t<td key={index} className={`${coded==='coded'?'bg-green white fw6':(coded==='notCoded'?'bg-red white fw6':(handoverstatus==='Handed'?'bg-moon-gray':null))} pv3 pr3 bb b--black-20`}>\r\n\t\t\t\t\t\t\t<input \r\n\t\t\t\t\t\t\ttype='text' \r\n\t\t\t\t\t\t\tname=\"updatehandover\" \r\n\t\t\t\t\t\t\tautoComplete='blej' \r\n\t\t\t\t\t\t\tplaceholder={`${item}`} \r\n\t\t\t\t\t\t\treadOnly={read}\r\n\t\t\t\t\t\t\tonChange={(event) => onChange(event)}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\treturn(\r\n\t\t\t\t\t\t<td key={index} className={`${coded==='coded'?'bg-green white fw6':(coded==='notCoded'?'bg-red white fw6':(handoverstatus==='Handed'?'bg-moon-gray':null))} pv3 pr3 bb b--black-20`}>\r\n\t\t\t\t\t\t\t{item}\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t\t<div className={`${coded==='coded'?'bg-green white fw6':(coded==='notCoded'?'bg-red white fw6':(handoverstatus==='Handed'?'bg-moon-gray':null))} flex`}>\r\n\t\t\t<td\r\n\t\t\tstyle={{cursor: 'pointer'}}\r\n\t\t\tclassName='bg-dark-blue white f6 link dim ph3 pv2 mb2 dib br2 ma2'\r\n\t\t\tonClick={() => onEditHandler()}\r\n\t\t\t>\r\n\t\t\t\t{\r\n\t\t\t\t\tread===false?x:Edit\r\n\t\t\t\t}\r\n\t\t\t</td>\r\n\t\t\t<td\r\n\t\t\tstyle={{cursor: 'pointer'}}\r\n\t\t\tclassName=\"bg-dark-blue white f6 link dim ph3 pv2 mb2 dib br2 ma2\"\r\n\t\t\tonClick = {() => onSubmit()} \r\n\t\t\t>\r\n\t\t\t\tUpdateStatus\r\n\t\t\t</td>\r\n\t\t</div>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default ModalRow;",{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","severity":1,"message":"120","line":8,"column":8,"nodeType":"121","messageId":"122","endLine":8,"endColumn":18},{"ruleId":"123","severity":1,"message":"124","line":123,"column":3,"nodeType":"125","messageId":"126","endLine":126,"endColumn":4},{"ruleId":"127","severity":1,"message":"128","line":389,"column":8,"nodeType":"129","endLine":389,"endColumn":15,"suggestions":"130"},{"ruleId":"131","severity":1,"message":"132","line":518,"column":17,"nodeType":"133","endLine":520,"endColumn":84},{"ruleId":"127","severity":1,"message":"134","line":42,"column":8,"nodeType":"129","endLine":42,"endColumn":10,"suggestions":"135"},{"ruleId":"119","severity":1,"message":"136","line":4,"column":8,"nodeType":"121","messageId":"122","endLine":4,"endColumn":28},{"ruleId":"119","severity":1,"message":"137","line":121,"column":14,"nodeType":"121","messageId":"122","endLine":121,"endColumn":22},{"ruleId":"119","severity":1,"message":"138","line":121,"column":24,"nodeType":"121","messageId":"122","endLine":121,"endColumn":37},{"ruleId":"119","severity":1,"message":"139","line":24,"column":8,"nodeType":"121","messageId":"122","endLine":24,"endColumn":22},{"ruleId":"119","severity":1,"message":"140","line":28,"column":8,"nodeType":"121","messageId":"122","endLine":28,"endColumn":22},{"ruleId":"115","replacedBy":"141"},{"ruleId":"117","replacedBy":"142"},{"ruleId":"119","severity":1,"message":"143","line":4,"column":9,"nodeType":"121","messageId":"122","endLine":4,"endColumn":16},{"ruleId":"119","severity":1,"message":"139","line":10,"column":8,"nodeType":"121","messageId":"122","endLine":10,"endColumn":22},{"ruleId":"119","severity":1,"message":"140","line":14,"column":8,"nodeType":"121","messageId":"122","endLine":14,"endColumn":22},"no-native-reassign",["144"],"no-negated-in-lhs",["145"],"no-unused-vars","'Background' is defined but never used.","Identifier","unusedVar","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchBatch'. Either include it or remove the dependency array.","ArrayExpression",["146"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","React Hook useEffect has missing dependencies: 'telecaller_id' and 'username'. Either include them or remove the dependency array.",["147"],"'useStateWithCallback' is defined but never used.","'username' is assigned a value but never used.","'telecaller_id' is assigned a value but never used.","'status1Handler' is assigned a value but never used.","'status2Handler' is assigned a value but never used.",["144"],["145"],"'lead_id' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"148","fix":"149"},{"desc":"150","fix":"151"},"Update the dependencies array to be: [batch, fetchBatch]",{"range":"152","text":"153"},"Update the dependencies array to be: [telecaller_id, username]",{"range":"154","text":"155"},[8981,8988],"[batch, fetchBatch]",[1156,1158],"[telecaller_id, username]"]